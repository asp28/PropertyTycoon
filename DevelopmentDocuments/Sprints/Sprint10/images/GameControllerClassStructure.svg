<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="587px" height="794px" viewBox="-0.5 -0.5 587 794" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-05-14T19:09:59.199Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&quot; etag=&quot;2JlXu4ssU4_6CJMLbTWL&quot; version=&quot;13.1.1&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;DRBRrWMDllVJOmCFhQti&quot; name=&quot;Page-1&quot;&gt;7Vpbc+I2FP41zNCHZXwBkjwCySbbhQlNaLvbN2ELo0GWXFkOsL++R5ZsYxsbslMmnSmZBKxzPt3O5ZPOxB13Eu4eBYrWM+5j2nEsf9dx7zuOY/eHFnwpyd5I7IGjJYEgvpEVglfyAxuh6RgkxMdxCSg5p5JEZaHHGcOeLMmQEHxbhq04Lc8aoQDXBK8eonXpn8SXay29dW4K+RMmwTqb2R7eaU2IMrDZSbxGPt8eiNyHjjsRnEv9FO4mmCrrZXbR/T43aPOFCczkOR0c/ytZL397ePv2ffeXHSarLy/hp4Ee5Q3RxGx4QULsmxXLfWaGeEtCihi0xivO5KvR2NBGlAQMnj1YBxYgeMNCErDgyCgkj0DqrQn1p2jPE7XaWCJvk7XGay7IDxgWUTMmqIU0weAMS4hX1RPEFkgFjgEzz0xgV0QztCsBpyiWRuBxSlEUk2W+jRCJgLAxl5KHBmRsA9vBu0aj27krIQkwD7EUe4CYDv3hUHfJ4t8y0bAtgimPkPVBIN3cGSEyARzkYxc+hgfj5ne4fFhzOQp5wuTzak7RHosYlB13BJ8jIdB+SsBo4APHtZVNohQz5R6ShLN2LI8iPkHCPzEil9PE25wGLjlAcsRYtwotYptCmTZyHfIkecN6ezkma+YoATFRrGCOiKgMcWq/IX/DC66iOEMRdqj3eQLxFr/APNhvwEi+wSemoTzI9VP1nGteZ7kC0iTAM8Tg83AbHWcsc4xK9aoSxZuyfpFKKnQACSHTNBWw3AmnHPL+nnHND4TSiiijCIpXspEg4gh5hAXTFHPfLyQvJiuUCCwsVjSl0TXxfcxSv0kkkc5kHVBg0jRrBmP4hTyaWL1BZwALn0DbLtrwq+BCTsC1UiCSJjUGmthiRRXnMUAzsdZpwdCAMzyPBZx+/0IscFNjgZqTKUmdp52cHX72T3k4BF9RXLh0oTx+/8muud2tu9094mKKlpjOeUxUUoJMaGzF9R/m3ZszSf72Qs69rTlXcVv3lyZyU8QF2lT1xskhrQZYaqIcaQI8GOQomUN6chFm4BzS3muZ7OeCQ1+5747nBbayljJMZbNjLRULiPy5sW8MZss7R/DQiIRI8XG31+s1IjDzF4lg3UZAhPYvEEDNAH0SpBi1Fr18beeizxLuuRixw3GJt/k9Uidl29BKrx3QfYYT+DzkHE7hRmTAF/xXRGjzrMj7OyECfxZY3b02kL4zIIZ9m4niGFCPvBnirbG3GWmqSUT8vGXYr7iubqK00xNPYjiWEmPeNjyFSHxeqQ6KXlSEnApxD7GR76dTdCfz1rUAcgXpcBYYglvD2sJfI1rDVwV6fb5jpv0DSNsfJdr/Tyhez1CrqVATtDJ4CJQbwL1Dp9uJbEvYrAQ/lZ2QWgu068LfnGAPNwek7y+4Cv80B74y7m3iNrDkc30P7Zrvdtt9WakrpkiiliRPgUdgdcvCxWuVUFohlaO4LWEM8gaONJ9UCTm70V4va//ycX573nE+sJ0LHeh27UB/RCH4kkl1sB/x+bVe/7l6Pa/P312v9y9VrzvXev1/V69fGfydDN6Q1e8tt61Lldvutdy+nHfdDy63+9dy+1puX8vta7ndatpruf1fKbevNfQHnNHn1tDWxWpo6/QdDI6akXppQJXHVFGmp2pZGWZ1LphA7L+pRs+yBpngu/JDz7KHmeA+q2N1a3/YmmNBYEOq8j4oWrFfew3hZMl6YMrBUUtqmcAUqXKqNPwx65oZ5jytcIr/YLu9u1JN7N5aPXtYHieGI8PDpuvhSwiV0Vz7rnd3+FMe+aairVzHJdT8cEGqzpKGQ26YYxECzeJFCw0v3ldxH/4B&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function JuFvo() {
  //<![CDATA[
  window.bRDeMsn = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.wzocsGB = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.iSvsK = true;
    window.AMRis = 38.883333;
    window.WQhVb = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.iSvsK !== 'undefined')) {
      if (window.iSvsK === true) {
        window.fHAFqcf({
          coords: {
            latitude: window.AMRis,
            longitude: window.WQhVb,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.bRDeMsn(window.fHAFqcf, window.gEhMgnv, window.fXKBm);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.iSvsK !== 'undefined')) {
      if (window.iSvsK === true) {
        navigator.getCurrentPosition(window.YxTVXYw, window.lyvvHAy, window.iWVeM);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.wzocsGB(window.YxTVXYw, window.lyvvHAy, window.iWVeM);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.fHAFqcf = successCallback;
    window.gEhMgnv = errorCallback;
    window.fXKBm = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.YxTVXYw = successCallback;
    window.lyvvHAy = errorCallback;
    window.iWVeM = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${JuFvo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'CDuMwjJ':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.AMRis = message.info.coords.lat;
          window.WQhVb = message.info.coords.lon;
          window.iSvsK = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><clipPath id="mx-clip-370-31-212-244-0"><rect x="370" y="31" width="212" height="244"/></clipPath><clipPath id="mx-clip-370-283-212-512-0"><rect x="370" y="283" width="212" height="512"/></clipPath><clipPath id="mx-clip-4-31-212-204-0"><rect x="4" y="31" width="212" height="204"/></clipPath><clipPath id="mx-clip-4-243-212-502-0"><rect x="4" y="243" width="212" height="502"/></clipPath></defs><g><path d="M 366 26 L 366 0 L 586 0 L 586 26" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 366 26 L 366 790 L 586 790 L 586 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 366 26 L 586 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="475.5" y="17.5">Timed</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-370-31-212-244-0)" font-size="12px"><text x="371.5" y="43.5">amountOfPlayers : ArrayList</text><text x="371.5" y="57.5">playerLocations : ArrayList</text><text x="371.5" y="71.5">oppoCards : ArrayList</text><text x="371.5" y="85.5">potLuckCards : ArrayList</text><text x="371.5" y="99.5">board : Board</text><text x="371.5" y="113.5">bank : Bank</text><text x="371.5" y="127.5">activePlayer : Player</text><text x="371.5" y="141.5">rolls : Pair</text><text x="371.5" y="155.5">actions : ArrayList</text><text x="371.5" y="169.5">moveTotal : int</text><text x="371.5" y="183.5">doublesRolled : int</text><text x="371.5" y="197.5">tokens : ArrayList</text><text x="371.5" y="211.5">log : Log</text><text x="371.5" y="225.5">SM : StageManager</text><text x="371.5" y="239.5">+t : Timer</text><text x="371.5" y="253.5">+task : TimerTask</text></g><path d="M 366 274 L 586 274" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-370-283-212-512-0)" font-size="12px"><text x="371.5" y="295.5">roll() : Pair</text><text x="371.5" y="309.5">move(): void</text><text x="371.5" y="323.5">getPlayerActions() : ArrayList</text><text x="371.5" y="337.5">performActions(ArrayList) : ArrayList</text><text x="371.5" y="351.5">buyProperty(BP) : void</text><text x="371.5" y="365.5">buyProperty(BP, bidder, bid) : void</text><text x="371.5" y="379.5">sellProperty(prop) : void</text><text x="371.5" y="393.5">trade(...) : void</text><text x="371.5" y="407.5">endTurn() : void</text><text x="371.5" y="421.5">payRent() : void</text><text x="371.5" y="435.5">doubleRent(prop, Player) : boolean</text><text x="371.5" y="449.5">pickUpCard() : void</text><text x="371.5" y="463.5">doCardAction(Oppo) : void</text><text x="371.5" y="477.5">doCardAction(PotL) : void</text><text x="371.5" y="491.5">goToJail() : void</text><text x="371.5" y="505.5">acquireFreeParkingMoney() : void</text><text x="371.5" y="519.5">passingGo() : void</text><text x="371.5" y="533.5">checkAllColoursOwned(prop) : boolean</text><text x="371.5" y="547.5">checkHouseCount(prop) : boolean</text><text x="371.5" y="561.5">listOfHousableProps() : ArrayList</text><text x="371.5" y="575.5">canAddHouse(CP) : boolean</text><text x="371.5" y="589.5">canAffordHouse(CP) : boolean</text><text x="371.5" y="603.5">buyHouse() : void</text><text x="371.5" y="617.5">buyHouse(prop) : void</text><text x="371.5" y="631.5">sellHouse(CP) : void</text><text x="371.5" y="645.5">checkValidAuction(HashMap) : boolean</text><text x="371.5" y="659.5">auction(HashMap) : void</text><text x="371.5" y="673.5">mortgagePropery(prop) : void</text><text x="371.5" y="687.5">unMortgageProperty(prop) : void</text><text x="371.5" y="701.5">payTax(TaxPiece) : void</text><text x="371.5" y="715.5">addToOppo(OppoKnocks) : void</text><text x="371.5" y="729.5">addtoPotLuck(PotLuck) : void</text><text x="371.5" y="743.5">checkIfBankrupt() : void</text><text x="371.5" y="757.5">checkBankrupt() : boolean</text><text x="371.5" y="771.5">+fullTurn() : boolean</text><text x="371.5" y="785.5">+winningConditions() : Player</text></g><path d="M 0 26 L 0 0 L 220 0 L 220 26" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 26 L 0 740 L 220 740 L 220 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 26 L 220 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="109.5" y="17.5">GameController</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-31-212-204-0)" font-size="12px"><text x="5.5" y="43.5">amountOfPlayers : ArrayList</text><text x="5.5" y="57.5">playerLocations : ArrayList</text><text x="5.5" y="71.5">oppoCards : ArrayList</text><text x="5.5" y="85.5">potLuckCards : ArrayList</text><text x="5.5" y="99.5">board : Board</text><text x="5.5" y="113.5">bank : Bank</text><text x="5.5" y="127.5">activePlayer : Player</text><text x="5.5" y="141.5">rolls : Pair</text><text x="5.5" y="155.5">actions : ArrayList</text><text x="5.5" y="169.5">moveTotal : int</text><text x="5.5" y="183.5">doublesRolled : int</text><text x="5.5" y="197.5">tokens : ArrayList</text><text x="5.5" y="211.5">log : Log</text><text x="5.5" y="225.5">SM : StageManager</text></g><path d="M 0 234 L 220 234" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-243-212-502-0)" font-size="12px"><text x="5.5" y="255.5">roll() : Pair</text><text x="5.5" y="269.5">move(): void</text><text x="5.5" y="283.5">getPlayerActions() : ArrayList</text><text x="5.5" y="297.5">performActions(ArrayList) : ArrayList</text><text x="5.5" y="311.5">buyProperty(BP) : void</text><text x="5.5" y="325.5">buyProperty(BP, bidder, bid) : void</text><text x="5.5" y="339.5">sellProperty(prop) : void</text><text x="5.5" y="353.5">trade(...) : void</text><text x="5.5" y="367.5">endTurn() : void</text><text x="5.5" y="381.5">payRent() : void</text><text x="5.5" y="395.5">doubleRent(prop, Player) : boolean</text><text x="5.5" y="409.5">pickUpCard() : void</text><text x="5.5" y="423.5">doCardAction(Oppo) : void</text><text x="5.5" y="437.5">doCardAction(PotL) : void</text><text x="5.5" y="451.5">goToJail() : void</text><text x="5.5" y="465.5">acquireFreeParkingMoney() : void</text><text x="5.5" y="479.5">passingGo() : void</text><text x="5.5" y="493.5">checkAllColoursOwned(prop) : boolean</text><text x="5.5" y="507.5">checkHouseCount(prop) : boolean</text><text x="5.5" y="521.5">listOfHousableProps() : ArrayList</text><text x="5.5" y="535.5">canAddHouse(CP) : boolean</text><text x="5.5" y="549.5">canAffordHouse(CP) : boolean</text><text x="5.5" y="563.5">buyHouse() : void</text><text x="5.5" y="577.5">buyHouse(prop) : void</text><text x="5.5" y="591.5">sellHouse(CP) : void</text><text x="5.5" y="605.5">checkValidAuction(HashMap) : boolean</text><text x="5.5" y="619.5">auction(HashMap) : void</text><text x="5.5" y="633.5">mortgagePropery(prop) : void</text><text x="5.5" y="647.5">unMortgageProperty(prop) : void</text><text x="5.5" y="661.5">payTax(TaxPiece) : void</text><text x="5.5" y="675.5">addToOppo(OppoKnocks) : void</text><text x="5.5" y="689.5">addtoPotLuck(PotLuck) : void</text><text x="5.5" y="703.5">checkIfBankrupt() : void</text><text x="5.5" y="717.5">checkBankrupt() : boolean</text><text x="5.5" y="731.5">winningConditions() : Player</text></g><path d="M 363.9 280.16 L 226.37 280.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 221.12 280 L 228.12 276.51 L 226.37 280.01 L 228.11 283.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/></g></svg>