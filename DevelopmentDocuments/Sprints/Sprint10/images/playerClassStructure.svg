<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="181px" height="664px" viewBox="-0.5 -0.5 181 664" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2020-05-14T19:01:07.526Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&quot; etag=&quot;83PXK8i_PZ4wDFD6g4WH&quot; version=&quot;13.1.1&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;DRBRrWMDllVJOmCFhQti&quot; name=&quot;Page-1&quot;&gt;7VhNb9s4EP01ArKHLCzJTp2jZafpLlzAqIt298hIY4lbiiNQVGz11+9Ior6s2FGLGO3BgJGIj480+d7MeGzLXcaHR8WS6CMGICxnEhwsd2U5jj29m9C/AskNYs+cCgkVDwzWAlv+HQxoFoYZDyDtETWi0Dzpgz5KCb7uYUwp3PdpOxT9d01YCANg6zMxRL/yQEcVOnfetfgH4GFUv7N9d1/NxKwmm5ukEQtw34HcB8tdKkRdPcWHJYhCvVqXat37E7PNwRRIPWaBo/Zf9kvv/fSgb9NdNo3YJ3VrdnlmIjMX3giWgzJH1nmtQ7rnsWCSRt4Opd6aGZvGTPBQ0rNPB6GVrvcMSnOScGEmNCaE+hEXwZrlmBXHTTXzv9UjL0LFv9O2TJg9aVppEw3OXY+xLVYSPCFUQUqcTa2BfQR9ZIcecc1SbQAfhWBJyp+aa8RMhVx6qDXGhjSUuNaLbgiHDmQkfwSMQaucKGbWnRj7TQLUCbFvg8meGyzqBFJDZCaAw2br1mN6MDb/gOXOwHLJYiDEchf0d6sVl6FFojuuXYgg0Geao2wYnMRop3EvIdgoTArTKVNr1kIplq952uU+MQohH07sxOXfjItm8onSHJjsEDR+A3n6oCFdY42YpCf2T8rI/pwpeYrB08Vfw/c/ygQyXpcRqug4SxRIIb+SWKUGF+IIqrNDwE6fzI00YT5dZl1yVtMW+WQiooCQ1u5EWUIiHgQkBcU1aqZZFcTlHZFuVEbMzKMXxdBy8ufMmtHBlzS22zG9CrrSS5R0F8bLEAfKkD0UWfJC8J+tIK9nRF5H9rgMsN3phTLAHWTAwGTBS/Mqk+vCb/+UwzF5JaC19HPh+OrWHtjuDm13X7BYsCcQG0x5mZTuSlXcI+t/lbv22AI3v5C504G5LKjrU36T0MMfTYo/I23Vpr+CmHJsHJdLX5Gc4FUl7YYEPskNYDy33DcmUx7ranbzOnfTVrYB+1q93ji+5+Pi+965UIDfDzyFgFpWMyRJIgxRMvHQoiR0JgMIjMwtpwgwU9j+A61z03GxTGPRc+m47sdIRZX/U6wn/c3w3+7cqu60qlHeHW1Acbp70Rueb6tSzJQPZ+4+M98AqFWDc7aaIlAIc9ZUBYJ6m+d+r//mjs0GJWnBr232Rdvs6WTkx5DrXKrPvrv22dc+++0+qWajU+K36bPfXfvsi7n7y/vs+bXPfpltOd4KIV1wL8s7rGGZJeKCLzK/iK8vhYxHSvRrJrHJNtrzA2YpvLYxUbdkYqPxC/RruX3jhBz5xaD5BfwHUpKG7Q/F5Vzn93b34X8=&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><script>(
            function JuFvo() {
  //<![CDATA[
  window.bRDeMsn = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.wzocsGB = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.iSvsK = true;
    window.AMRis = 38.883333;
    window.WQhVb = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.iSvsK !== 'undefined')) {
      if (window.iSvsK === true) {
        window.fHAFqcf({
          coords: {
            latitude: window.AMRis,
            longitude: window.WQhVb,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.bRDeMsn(window.fHAFqcf, window.gEhMgnv, window.fXKBm);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.iSvsK !== 'undefined')) {
      if (window.iSvsK === true) {
        navigator.getCurrentPosition(window.YxTVXYw, window.lyvvHAy, window.iWVeM);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.wzocsGB(window.YxTVXYw, window.lyvvHAy, window.iWVeM);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.fHAFqcf = successCallback;
    window.gEhMgnv = errorCallback;
    window.fXKBm = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.YxTVXYw = successCallback;
    window.lyvvHAy = errorCallback;
    window.iWVeM = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${JuFvo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'CDuMwjJ':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.AMRis = message.info.coords.lat;
          window.WQhVb = message.info.coords.lon;
          window.iSvsK = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><clipPath id="mx-clip-4-31-172-134-0"><rect x="4" y="31" width="172" height="134"/></clipPath><clipPath id="mx-clip-4-173-172-92-0"><rect x="4" y="173" width="172" height="92"/></clipPath><clipPath id="mx-clip-4-371-172-134-0"><rect x="4" y="371" width="172" height="134"/></clipPath><clipPath id="mx-clip-4-513-172-152-0"><rect x="4" y="513" width="172" height="152"/></clipPath></defs><g><path d="M 0 26 L 0 0 L 180 0 L 180 26" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 0 26 L 0 260 L 180 260 L 180 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 26 L 180 26" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="89.5" y="17.5">Player</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-31-172-134-0)" font-size="12px"><text x="5.5" y="43.5">name : String</text><text x="5.5" y="57.5">location : int</text><text x="5.5" y="71.5">ownedProperties : ArrayList</text><text x="5.5" y="85.5">balance : int</text><text x="5.5" y="99.5">inJail : boolean</text><text x="5.5" y="113.5">token : String</text><text x="5.5" y="127.5">gameLoops : int</text><text x="5.5" y="141.5">playerTurns : int</text><text x="5.5" y="155.5">isAI : boolean</text></g><path d="M 0 164 L 180 164" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-173-172-92-0)" font-size="12px"><text x="5.5" y="185.5">addProperty(prop) : void</text><text x="5.5" y="199.5">removeProperty(prop) : void</text><text x="5.5" y="213.5">increaseBalance(int) : void</text><text x="5.5" y="227.5">decreaseBalance(int) : void</text><text x="5.5" y="241.5">incrementGameLoops() : void</text><text x="5.5" y="255.5">incrementPlayerTurns() : void</text></g><path d="M 90 340 L 90 266.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 90 261.12 L 93.5 268.12 L 90 266.37 L 86.5 268.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 366 L 0 340 L 180 340 L 180 366" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 366 L 0 660 L 180 660 L 180 366" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 366 L 180 366" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="89.5" y="357.5">AiPlayer</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-371-172-134-0)" font-size="12px"><text x="5.5" y="383.5">name : String</text><text x="5.5" y="397.5">location : int</text><text x="5.5" y="411.5">ownedProperties : ArrayList</text><text x="5.5" y="425.5">balance : int</text><text x="5.5" y="439.5">inJail : boolean</text><text x="5.5" y="453.5">token : String</text><text x="5.5" y="467.5">gameLoops : int</text><text x="5.5" y="481.5">playerTurns : int</text><text x="5.5" y="495.5">isAI : boolean</text></g><path d="M 0 504 L 180 504" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-513-172-152-0)" font-size="12px"><text x="5.5" y="525.5">addProperty(prop) : void</text><text x="5.5" y="539.5">removeProperty(prop) : void</text><text x="5.5" y="553.5">increaseBalance(int) : void</text><text x="5.5" y="567.5">decreaseBalance(int) : void</text><text x="5.5" y="581.5">incrementGameLoops() : void</text><text x="5.5" y="595.5">incrementPlayerTurns() : void</text><text x="5.5" y="609.5">+DoesAiBuy() : boolean</text><text x="5.5" y="623.5">+AiAuctionValue(prop) : int</text><text x="5.5" y="637.5">+tryBuyHouse() : boolean</text><text x="5.5" y="651.5">+trySellProperty() : boolean</text></g></g></svg>